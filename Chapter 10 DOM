DOM 是针对HTML和XML文档的一个API。

html是文档元素。文档元素是文档的最外层元素，在 HTML 页面中,文档元素始终都是<html>元素。在 XML 中,没有预定义 的元素,因此任何元素都可能成为文档元素。
nodeType 属性，节点类型由在 Node 类型中定义的下列 12 个数值常量来表示,任何节点类型必居其一:
 Node.ELEMENT_NODE(1);
 Node.ATTRIBUTE_NODE(2);
 Node.TEXT_NODE(3);
 Node.CDATA_SECTION_NODE(4);
 Node.ENTITY_REFERENCE_NODE(5);
 Node.ENTITY_NODE(6);
 Node.PROCESSING_INSTRUCTION_NODE(7);  Node.COMMENT_NODE(8);
 Node.COMMENT_NODE(8);
 Node.DOCUMENT_NODE(9);
 Node.DOCUMENT_TYPE_NODE(10);
 Node.DOCUMENT_FRAGMENT_NODE(11);  Node.NOTATION_NODE(12)。

每个节点都有一个 childNodes 属性,其中保存着一个 NodeList 对象
Array.prototype.slice.call(arguments)能将具有length属性的对象转成数组，
除了IE下的节点集合（因为ie下的dom对象是以com对象的形式实现的，js对象与com对象不能进行转换）
firstChild = childNodes[0]
lastChild = childNodes[s.length -1]
 parentNode 属性
 previousSibling 属性
 nextSibling 属性
 hasChildNodes()
 ownerDocument

appendChild()
appendAfter()
insertBefore()
replaceChild()
removeChild()
cloneNode(true)执行深复制,也就是复制节点及其整个子节点树;
cloneNode(false)执行浅复制, 即只复制节点本身。
复制后返回的节点副本属于文档所有,但并没有为它指定父节点。因此,这个节点 副本就成为了一个"孤儿"
normalize()


document 对象是
1. HTMLDocument的一个实例,表示整个 HTML 页面。
2. document 对象是 window 对象的一个 属性,因此可以将其作为全局对象来访问

var body = document.body; //取得对<body>的引用
var html = document.documentElement; //取得对<html>的引用
var doctype = document.doctype; //取得对<!DOCTYPE>的引用
var originalTitle = document.title; //取得文档标题


//取得完整的 URL
var url = document.URL;
//取得域名
var domain = document.domain;
//取得来源页面的 URL
var referrer = document.referrer;

浏览器对 domain 属性还有一个限制,即如果域名一开始是“松散的”(loose),那么不能将它再设 置为“紧绷的”(tight)。
换句话说,在将 document.domain 设置为"wrox.com"之后,就不能再将其 设置回"p2p.wrox.com",否则将会导致错误

var div = document.getElementById("myDiv"); //取得<div>元素的引用
var images = document.getElementsByTagName("img"); //返回一个HTMLCollection
var myImage = images.namedItem("myImage");
var myImage = images["myImage"];
var radios = document.getElementsByName("color");

 document.anchors,包含文档中所有带 name 特性的<a>元素;
 document.forms,包含文档中所有的<form>元素,与 document.getElementsByTagName("form")
得到的结果相同;
document.images,包含文档中所有的<img>元素,与 document.getElementsByTagName("img")得到的结果相同;
 document.links,包含文档中所有带 href 特性的<a>元素。

DOM1 级只为 document.implementation 规定了一个方法,即 hasFeature()
var hasXmlDom = document.implementation.hasFeature("XML", "1.0");

有一个 document 对象的功能已经存在很多年了,那就是将输出流写入到网页中的能力。
这个能力 体现在下列 4 个方法中:write()、writeln()、open()和 close()


<div id="myDiv" class="bd" title="Body text" lang="en" dir="ltr"></div>


element类型的方法：
.id
.getAttribute("id")
.setAttribute("class", "ft")



//得到的是element类型的变量，
var div = document.getElementById("myDiv");
alert(div.id); //"myDiv""
alert(div.className); //"bd"
alert(div.title); //"Body text"
alert(div.lang); //"en"
alert(div.dir); //"ltr"

var div = document.getElementById("myDiv");
alert(div.getAttribute("id"));
alert(div.getAttribute("class"));
alert(div.getAttribute("title"));
alert(div.getAttribute("lang"));
alert(div.getAttribute("dir"));


div.setAttribute("id", "someOtherId");
div.setAttribute("class", "ft");
div.setAttribute("title", "Some other text");
div.setAttribute("lang","fr");
div.setAttribute("dir", "rtl");

div.removeAttribute("class");

var id = element.attributes.getNamedItem("id").nodeValue;
var id = element.attributes["id"].nodeValue;

 getNamedItem(name):返回 nodeName 属性等于 name 的节点;
 removeNamedItem(name):从列表中移除 nodeName 属性等于 name 的节点;
 setNamedItem(node):向列表中添加节点,以节点的 nodeName 属性为索引;
 item(pos):返回位于数字 pos 位置处的节点。

var id = element.attributes.getNamedItem("id").nodeValue;
var id = element.attributes["id"].nodeValue;
element.attributes["id"].nodeValue = "someOtherId";
var oldAttr = element.attributes.removeNamedItem("id");
element.attributes.setNamedItem(newAttr);
var div = document.createElement("div");
    div.id = "myNewDiv";
    div.className = "box";
document.body.appendChild(div);


data- 前缀，自定义attribute


============ 10.2 DOM 操作技术

10.2.1 动态脚本
var script = document.createElement("script");
script.type = "text/javascript";
var code = "function sayHi(){alert('hi');}";
try {
    script.appendChild(document.createTextNode("code"));
} catch (ex){
    script.text = code;
}
document.body.appendChild(script);

10.2.2 动态样式
function loadStyleString(css){
  var style = document.createElement("style");
  style.type = "text/css";
  try{
    style.appendChild(document.createTextNode(css));
  } catch (ex){
    style.styleSheet.cssText = css;
  }
  var head = document.getElementsByTagName("head")[0];
  head.appendChild(style);
}
